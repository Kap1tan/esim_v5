# handlers/profile.py

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from keyboards.inline import get_profile_keyboard, get_back_to_main_keyboard
from texts import TEXTS
from config import ESIM_ACCESS_CODE
from utils.esim_client import ESIMAccessClient
import logging

router = Router()
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ eSIM Access
esim_client = ESIMAccessClient(ESIM_ACCESS_CODE)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
user_orders = {}


class ProfileStates(StatesGroup):
    viewing_profile = State()
    viewing_esim = State()


@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)
    orders = user_orders.get(user_id, [])

    if not orders:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤
        profile_text = f"{TEXTS['profile']}\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö eSIM. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ö—É–ø–∏—Ç—å eSIM¬ª, —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—É—é."
        keyboard = get_profile_keyboard()
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–º–µ—é—â–∏–º–∏—Å—è eSIM
        profile_text = TEXTS['profile'] + "\n\n"

        for i, order in enumerate(orders):
            order_no = order.get('order_no', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            country = order.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞')
            date = order.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')

            profile_text += f"{i + 1}. eSIM {country} - {date}\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å eSIM
        builder = InlineKeyboardBuilder()

        for i, order in enumerate(orders):
            country = order.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞')
            builder.row(
                InlineKeyboardButton(text=f"eSIM {country}", callback_data=f"esim_{i}")
            )

        builder.row(
            InlineKeyboardButton(text="‚Ü©Ô∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="back_to_main")
        )

        keyboard = builder.as_markup()

    try:
        if callback.message.photo:
            await callback.message.delete()
            await callback.message.answer(
                text=profile_text,
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text(
                text=profile_text,
                reply_markup=keyboard
            )
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            text=profile_text,
            reply_markup=keyboard
        )

    await state.set_state(ProfileStates.viewing_profile)
    await callback.answer()


@router.callback_query(ProfileStates.viewing_profile, F.data.startswith("esim_"))
async def show_esim_details(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ eSIM"""
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å eSIM
    esim_index = int(callback.data.split('_')[1])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
    orders = user_orders.get(user_id, [])

    if not orders or esim_index >= len(orders):
        try:
            if callback.message.photo:
                await callback.message.delete()
                await callback.message.answer(
                    text="eSIM –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.",
                    reply_markup=get_back_to_main_keyboard()
                )
            else:
                await callback.message.edit_text(
                    text="eSIM –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.",
                    reply_markup=get_back_to_main_keyboard()
                )
        except Exception:
            await callback.message.answer(
                text="eSIM –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.",
                reply_markup=get_back_to_main_keyboard()
            )
        await callback.answer()
        return

    order = orders[esim_index]
    order_no = order.get('order_no', '')

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ eSIM —á–µ—Ä–µ–∑ API
    profiles = esim_client.query_order(order_no)

    if not profiles:
        try:
            if callback.message.photo:
                await callback.message.delete()
                await callback.message.answer(
                    text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± eSIM. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_back_to_main_keyboard()
                )
            else:
                await callback.message.edit_text(
                    text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± eSIM. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_back_to_main_keyboard()
                )
        except Exception:
            await callback.message.answer(
                text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± eSIM. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_back_to_main_keyboard()
            )
        await callback.answer()
        return

    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    profile = profiles[0]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
    ac = profile.get("ac", "")  # Activation Code
    qr_code_url = profile.get("qrCodeUrl", "")
    iccid = profile.get("iccid", "")
    status = profile.get("status", "")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    status_text = "–ê–∫—Ç–∏–≤–Ω–∞" if status == "ACTIVE" else "–ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"

    esim_details = f"""
eSIM #{esim_index + 1}

ICCID: {iccid}
–°—Ç–∞—Ç—É—Å: {status_text}
–ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {ac}

QR-–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {qr_code_url}

–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
"""

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()

    # –ï—Å–ª–∏ eSIM –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    if status != "ACTIVE":
        builder.row(
            InlineKeyboardButton(text="üì≤ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"activate_esim_{esim_index}")
        )

    builder.row(
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile")
    )

    try:
        if callback.message.photo:
            await callback.message.delete()
            await callback.message.answer(
                text=esim_details,
                reply_markup=builder.as_markup(),
                disable_web_page_preview=False
            )
        else:
            await callback.message.edit_text(
                text=esim_details,
                reply_markup=builder.as_markup(),
                disable_web_page_preview=False
            )
    except Exception:
        await callback.message.answer(
            text=esim_details,
            reply_markup=builder.as_markup(),
            disable_web_page_preview=False
        )

    await state.set_state(ProfileStates.viewing_esim)
    await callback.answer()


# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ eSIM
@router.callback_query(ProfileStates.viewing_esim, F.data.startswith("activate_esim_"))
async def activate_esim(callback: CallbackQuery, state: FSMContext):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è eSIM"""
    try:
        if callback.message.photo:
            await callback.message.delete()
            await callback.message.answer(
                text="eSIM –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å eSIM¬ª.",
                reply_markup=get_back_to_main_keyboard()
            )
        else:
            await callback.message.edit_text(
                text="eSIM –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å eSIM¬ª.",
                reply_markup=get_back_to_main_keyboard()
            )
    except Exception:
        await callback.message.answer(
            text="eSIM –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å eSIM¬ª.",
            reply_markup=get_back_to_main_keyboard()
        )
    await callback.answer()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
def save_order(user_id, order_no, country, package_name):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from datetime import datetime

    order_info = {
        'order_no': order_no,
        'country': country,
        'package_name': package_name,
        'date': datetime.now().strftime('%d.%m.%Y')
    }

    if user_id not in user_orders:
        user_orders[user_id] = []

    user_orders[user_id].append(order_info)