# keyboards/inline.py

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Dict, Any
from utils.currency import currency_converter


def get_start_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å eSIM", callback_data="buy_esim"),
        InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    )
    builder.row(
        InlineKeyboardButton(text="üì± –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å eSIM", callback_data="setup"),
        InlineKeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã", callback_data="questions")
    )
    builder.row(
        InlineKeyboardButton(text="üí∞ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π —Å WorldWideSim", callback_data="partner")
    )

    return builder.as_markup()


def get_buy_esim_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="üêº –ê–∑–∏—è", callback_data="region_asia")
    )
    builder.row(
        InlineKeyboardButton(text="üê™ –ë–ª–∏–∂–Ω–∏–π –≤–æ—Å—Ç–æ–∫", callback_data="region_middle_east")
    )
    builder.row(
        InlineKeyboardButton(text="üêå –ï–≤—Ä–æ–ø–∞", callback_data="region_europe")
    )
    builder.row(
        InlineKeyboardButton(text="ü¶Ö –ê–º–µ—Ä–∏–∫–∞", callback_data="region_americas")
    )
    builder.row(
        InlineKeyboardButton(text="üêª –°–ù–ì", callback_data="region_cis")
    )
    builder.row(
        InlineKeyboardButton(text="ü¶Å –ê—Ñ—Ä–∏–∫–∞", callback_data="region_africa")
    )
    builder.row(
        InlineKeyboardButton(text="‚Ü©Ô∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="back_to_main")
    )

    return builder.as_markup()


def get_countries_keyboard(region_key: str, countries: List[str], page: int = 1):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –ø–æ 10 —Å—Ç—Ä–∞–Ω"""
    builder = InlineKeyboardBuilder()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 10 —Å—Ç—Ä–∞–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    countries_per_page = 10
    start_idx = (page - 1) * countries_per_page
    end_idx = start_idx + countries_per_page

    current_countries = countries[start_idx:end_idx]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç—Ä–∞–Ω (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ)
    for country in current_countries:
        # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –¥–ª—è callback_data
        if " " in country:
            country_name = country.split(" ", 1)[1]
        else:
            country_name = country

        builder.row(
            InlineKeyboardButton(text=country, callback_data=f"country_{country_name}")
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    total_pages = (len(countries) + countries_per_page - 1) // countries_per_page

    if total_pages > 1:
        nav_buttons = []

        # –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        if page > 1:
            nav_buttons.append(
                InlineKeyboardButton(text="‚Üê", callback_data=f"page_{region_key}_{page - 1}")
            )
        else:
            nav_buttons.append(
                InlineKeyboardButton(text="‚àí", callback_data="navigation_disabled")
            )

        # –°—Ä–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        nav_buttons.append(
            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="page_info")
        )

        # –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞
        if page < total_pages:
            nav_buttons.append(
                InlineKeyboardButton(text="‚Üí", callback_data=f"page_{region_key}_{page + 1}")
            )
        else:
            nav_buttons.append(
                InlineKeyboardButton(text="‚àí", callback_data="navigation_disabled")
            )

        builder.row(*nav_buttons)

    # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ–≥–∏–æ–Ω–æ–≤
    builder.row(
        InlineKeyboardButton(text="‚Ü©Ô∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="buy_esim")
    )

    return builder.as_markup()


def is_daily_package(package: Dict[str, Any]) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞–∫–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º (–ø–æ—Å—É—Ç–æ—á–Ω—ã–º)"""
    duration_unit = package.get("durationUnit", "").upper()
    duration = package.get("duration", 0)
    data_type = package.get("dataType", 1)

    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: dataType = 2 (daily reset) –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ —Å DAY
    return data_type == 2 or (duration_unit == "DAY" and duration <= 7)


def format_package_button_text(package: Dict[str, Any], country_name: str, usd_to_rub_rate: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–∫–µ—Ç–∞ –≤ —Ä—É–±–ª—è—Ö –ø–æ —Ñ–æ—Ä–º—É–ª–µ –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    volume_bytes = package.get("volume", 0)
    duration = package.get("duration", 0)
    duration_unit = package.get("durationUnit", "DAY")
    price_usd = package.get("price", 0) / 10000  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –¥–æ–ª–ª–∞—Ä—ã

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤ –≤ –ú–ë –∏–ª–∏ –ì–ë
    if volume_bytes >= 1073741824:  # 1 –ì–ë
        volume_str = f"{volume_bytes / 1073741824:.0f}–ì–ë"
    else:
        volume_str = f"{volume_bytes / 1048576:.0f}–ú–ë"

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º—É–ª—É –∑–∞–∫–∞–∑—á–∏–∫–∞: (–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–∏–º–∫–∏ * –∫—É—Ä—Å —Ä–∞–ø–∏—Ä—ã USDT/RUB –∑–Ω–∞—á–µ–Ω–∏–µ HIGH * 4) + 6.5%
    step1 = price_usd * usd_to_rub_rate * 4  # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ –∫—É—Ä—Å –∏ –Ω–∞ 4
    step2 = step1 * 1.065  # –î–æ–±–∞–≤–ª—è–µ–º 6.5%
    rub_price = round(step2 / 10) * 10  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 10 —Ä—É–±–ª–µ–π

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–∞–∫–µ—Ç–∞
    if is_daily_package(package):
        # –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤: "–°—Ç—Ä–∞–Ω–∞ 1–ì–ë/–î–µ–Ω—å ‚Äî –æ—Ç 300‚ÇΩ"
        return f"{country_name} {volume_str}/–î–µ–Ω—å ‚Äî –æ—Ç {int(rub_price)}‚ÇΩ"
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤: "–°—Ç—Ä–∞–Ω–∞ 1–ì–ë, 7 –¥–Ω–µ–π ‚Äî 500‚ÇΩ"
        if duration_unit == "DAY":
            duration_str = f"{duration} –¥–Ω–µ–π"
        elif duration_unit == "MONTH":
            duration_str = f"{duration} –º–µ—Å—è—Ü–µ–≤"
        else:
            duration_str = f"{duration} {duration_unit}"

        return f"{country_name} {volume_str}, {duration_str} ‚Äî {int(rub_price)}‚ÇΩ"


def deduplicate_packages(packages: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """–£–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –æ–±—ä–µ–º–æ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, –æ—Å—Ç–∞–≤–ª—è—è —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π"""
    unique_packages = {}

    for package in packages:
        volume = package.get("volume", 0)
        duration = package.get("duration", 0)
        duration_unit = package.get("durationUnit", "DAY")
        data_type = package.get("dataType", 1)
        price = package.get("price", 0)

        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
        key = (volume, duration, duration_unit, data_type)

        # –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –µ—â–µ –Ω–µ—Ç –∏–ª–∏ –Ω–∞–π–¥–µ–Ω –±–æ–ª–µ–µ –¥–µ—à–µ–≤—ã–π
        if key not in unique_packages or price < unique_packages[key].get("price", float('inf')):
            unique_packages[key] = package

    return list(unique_packages.values())


def get_packages_keyboard(packages: List[Dict[str, Any]], country_code: str, country_name: str, page: int = 1):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤"""
    builder = InlineKeyboardBuilder()

    # –î–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç—ã
    packages = deduplicate_packages(packages)

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤
    usd_to_rub_rate = currency_converter.get_usd_to_rub_rate()

    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–∞–∫–µ—Ç—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏ –æ–±—ã—á–Ω—ã–µ
    daily_packages = [p for p in packages if is_daily_package(p)]
    regular_packages = [p for p in packages if not is_daily_package(p)]

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
    daily_packages.sort(key=lambda x: (x.get("volume", 0), x.get("price", 0)))
    regular_packages.sort(key=lambda x: (x.get("duration", 0), x.get("volume", 0), x.get("price", 0)))

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º: —Å–Ω–∞—á–∞–ª–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ, –ø–æ—Ç–æ–º –æ–±—ã—á–Ω—ã–µ
    all_packages = daily_packages + regular_packages

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 10 –ø–∞–∫–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    packages_per_page = 10
    start_idx = (page - 1) * packages_per_page
    end_idx = start_idx + packages_per_page

    current_packages = all_packages[start_idx:end_idx]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    daily_count_on_page = 0
    regular_count_on_page = 0

    for i, package in enumerate(current_packages):
        actual_index = start_idx + i  # –†–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ

        # –°—á–∏—Ç–∞–µ–º —Ç–∏–ø—ã –ø–∞–∫–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if is_daily_package(package):
            daily_count_on_page += 1
        else:
            regular_count_on_page += 1

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –æ–±—ã—á–Ω—ã–π –ø–∞–∫–µ—Ç –ø–æ—Å–ª–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        if (daily_count_on_page > 0 and regular_count_on_page == 1 and
                not is_daily_package(package) and i > 0):
            builder.row(
                InlineKeyboardButton(text="‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", callback_data="separator")
            )

        button_text = format_package_button_text(package, country_name, usd_to_rub_rate)
        builder.row(
            InlineKeyboardButton(text=button_text, callback_data=f"package_{actual_index}")
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    total_pages = (len(all_packages) + packages_per_page - 1) // packages_per_page

    if total_pages > 1:
        nav_buttons = []

        # –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        if page > 1:
            nav_buttons.append(
                InlineKeyboardButton(text="‚Üê", callback_data=f"packages_page_{country_code}_{page - 1}")
            )
        else:
            nav_buttons.append(
                InlineKeyboardButton(text="‚àí", callback_data="navigation_disabled")
            )

        # –°—Ä–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        nav_buttons.append(
            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="page_info")
        )

        # –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞
        if page < total_pages:
            nav_buttons.append(
                InlineKeyboardButton(text="‚Üí", callback_data=f"packages_page_{country_code}_{page + 1}")
            )
        else:
            nav_buttons.append(
                InlineKeyboardButton(text="‚àí", callback_data="navigation_disabled")
            )

        builder.row(*nav_buttons)

    # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ–≥–∏–æ–Ω–æ–≤
    builder.row(
        InlineKeyboardButton(text="‚Ü©Ô∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="buy_esim")
    )

    return builder.as_markup()


def get_days_selection_keyboard(package_index: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞"""
    builder = InlineKeyboardBuilder()

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–Ω–µ–π
    days_options = [1, 3, 5, 7, 10, 15, 30]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(days_options), 2):
        row_buttons = []
        for j in range(2):
            if i + j < len(days_options):
                days = days_options[i + j]
                day_text = f"{days} –¥–µ–Ω—å" if days == 1 else f"{days} –¥–Ω–µ–π"
                row_buttons.append(
                    InlineKeyboardButton(
                        text=day_text,
                        callback_data=f"select_days_{package_index}_{days}"
                    )
                )
        builder.row(*row_buttons)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    builder.row(
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="back_to_packages")
    )

    return builder.as_markup()


def get_confirm_keyboard(country_code: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ —Å –°–ë–ü"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ –°–ë–ü", callback_data="pay_sbp")
    )
    builder.row(
        InlineKeyboardButton(text="‚Ü©Ô∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data=f"back_to_packages_{country_code}")
    )

    return builder.as_markup()


def get_payment_done_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="üì± –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ eSIM", callback_data="show_esim_details")
    )

    return builder.as_markup()


def get_back_to_countries_keyboard(region_data: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω"""
    builder = InlineKeyboardBuilder()

    # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ–≥–∏–æ–Ω–æ–≤
    builder.row(
        InlineKeyboardButton(text="‚Ü©Ô∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="buy_esim")
    )

    return builder.as_markup()


def get_profile_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="‚Ü©Ô∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="back_to_main")
    )

    return builder.as_markup()


def get_setup_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ eSIM"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="‚Ü©Ô∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="back_to_main")
    )

    return builder.as_markup()


def get_questions_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="–ß—Ç–æ —Ç–∞–∫–æ–µ eSIM?", callback_data="qa_what_is_esim")
    )
    builder.row(
        InlineKeyboardButton(text="–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç?", callback_data="qa_how_to_connect")
    )
    builder.row(
        InlineKeyboardButton(text="–ö–∞–∫–æ–π –ø–∞–∫–µ—Ç –º–Ω–µ –≤—ã–±—Ä–∞—Ç—å?", callback_data="qa_which_package")
    )
    builder.row(
        InlineKeyboardButton(text="–ú–æ–∂–Ω–æ –ª–∏ –∑–≤–æ–Ω–∏—Ç—å –∏ –ø–∏—Å–∞—Ç—å SMS?", callback_data="qa_can_call_sms")
    )
    builder.row(
        InlineKeyboardButton(text="–ú–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç eSIM?", callback_data="qa_phone_support")
    )
    builder.row(
        InlineKeyboardButton(text="–ö–æ–≥–¥–∞ —Å—Ç–∞—Ä—Ç—É–µ—Ç —Ç–∞—Ä–∏—Ñ?", callback_data="qa_when_starts")
    )
    builder.row(
        InlineKeyboardButton(text="–ö–∞–∫ –ø—Ä–æ–¥–ª–∏—Ç—å eSIM?", callback_data="qa_how_extend")
    )
    builder.row(
        InlineKeyboardButton(text="–ú–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏?", callback_data="qa_refund")
    )
    builder.row(
        InlineKeyboardButton(text="–ù–∞—Å–∫–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω–∞ eSIM?", callback_data="qa_is_safe")
    )
    builder.row(
        InlineKeyboardButton(text="–ú–æ–∂–Ω–æ –ª–∏ —Ä–∞–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç?", callback_data="qa_share_internet")
    )
    builder.row(
        InlineKeyboardButton(text="–†–∞–±–æ—Ç–∞—é—Ç –ª–∏ WhatsApp –∏ Telegram?", callback_data="qa_messengers_work")
    )
    builder.row(
        InlineKeyboardButton(text="–ß–µ–º eSIM –ª—É—á—à–µ —Ä–æ—É–º–∏–Ω–≥–∞?", callback_data="qa_better_than_roaming")
    )
    builder.row(
        InlineKeyboardButton(text="–ü–æ—á–µ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±—ã–≤–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã–º?", callback_data="qa_slow_internet")
    )
    builder.row(
        InlineKeyboardButton(text="‚Ü©Ô∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="back_to_main")
    )

    return builder.as_markup()


def get_qa_back_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤–æ–ø—Ä–æ—Å–∞–º"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="‚Ü©Ô∏è –ö –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="questions")
    )

    return builder.as_markup()


def get_back_to_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="‚Ü©Ô∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="back_to_main")
    )

    return builder.as_markup()


def get_partner_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="partner_referral")
    )
    builder.row(
        InlineKeyboardButton(text="–ú–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ", callback_data="partner_community")
    )
    builder.row(
        InlineKeyboardButton(text="‚Ü©Ô∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="back_to_main")
    )

    return builder.as_markup()


def get_partner_referral_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="üìé –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–æ–º", callback_data="share_referral")
    )
    builder.row(
        InlineKeyboardButton(text="‚Ü©Ô∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="partner")
    )

    return builder.as_markup()


def get_partner_community_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="üõ† –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–≥–æ –±–æ—Ç–∞", url="https://t.me/levshurygin")
    )
    builder.row(
        InlineKeyboardButton(text="‚Ü©Ô∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="partner")
    )

    return builder.as_markup()


def get_feedback_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="üëç –î–∞", callback_data="feedback_yes"),
        InlineKeyboardButton(text="üòï –ù–µ—Ç", callback_data="feedback_no")
    )

    return builder.as_markup()


def get_feedback_no_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="questions")
    )
    builder.row(
        InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="support")
    )

    return builder.as_markup()